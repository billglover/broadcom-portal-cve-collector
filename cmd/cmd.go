package cmd

import (
	"bufio"
	"fmt"
	"os"

	"github.com/laidbackware/broadcom-portal-cve-collector/api"
	"github.com/laidbackware/broadcom-portal-cve-collector/sheet"
	"github.com/spf13/cobra"
)

var rootCmd = &cobra.Command{
	Use:   "b-cve",
	Short: "b-cve simple CLI to download CVE data from Broadcom",
	Long:  `b-cve simple CLI to download CVE data from Broadcom`,
	Run: func(cmd *cobra.Command, args []string) {
		run()
	},
}

func Execute() {
	if err := rootCmd.Execute(); err != nil {
		fmt.Fprintln(os.Stderr, err)
		os.Exit(1)
	}
}

func run() {
  cookie := setup()
  allProductCves, err := api.Fetch(cookie)
  handleError(err)
  fileName, err := sheet.WriteSheet(allProductCves, "")
  handleError(err)
	fmt.Printf("Written file: %s\n", fileName)
}

func setup() (cookie string) {
	cookie, _ = os.LookupEnv("BC_COOKIE")

	if cookie == "" {
		fmt.Println("You must paste the session cookie from support.broadcom.com below and press enter")
		fmt.Println("Instructions > https://github.com/laidbackware/broadcom-portal-cve-collector/blob/main/README.md")
		// using bufio.NewScanner to allow ; in the input string
		scanner := bufio.NewScanner(os.Stdin)
		scanner.Scan()
		err := scanner.Err()
    handleError(err)
	}
	return
}

func handleError(err error) {
  if err != nil {
    fmt.Fprintln(os.Stderr, err)
    os.Exit(1)
  }
}