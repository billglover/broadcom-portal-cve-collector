package sheet

import (
	"sort"
	"reflect"

	"golang.org/x/exp/maps"

	"github.com/laidbackware/broadcom-portal-cve-collector/api"
	"github.com/xuri/excelize/v2"
)

func WriteSheet(allProductCves map[string][]api.Cve, file_name string) (output_file string, err error) {
	if file_name == "" {
		file_name = "cves.xlsx"
	}

	headers := []string{
		"AffectedCve",
		"Title",
		"Severity",
		"DocumentID",
		"Status",
		"Published",
		"Updated",
		"NotificationURL",
		"SupportProducts",
		"WorkAround",
	}

	columnWidths := []float64{
		30, 40, 8, 12, 8, 13, 22, 15, 15, 15,
	}
	
	f := excelize.NewFile()
	defer func() {
		if err = f.Close(); err != nil {
			return
		}
	}()

	// Get keys to enable sorting so that each sheet has a predictable order
	productNames := maps.Keys(allProductCves)
	sort.Strings(productNames)
	for _, productName := range productNames {
		_, err = f.NewSheet(productName)
		if err != nil {
			return
		}
		setColumnWidths(f, productName, columnWidths)

		// Write headers
		writeLine(f, productName, headers, 0)

		for row, cve := range allProductCves[productName]{
			lineContent := structToList(cve, headers)
			writeLine(f, productName, lineContent, row + 1)
		}

	}
	f.DeleteSheet("Sheet1")

	if err = f.SaveAs(file_name); err != nil {
		return
	}
	output_file = file_name
	return
}

// Set widths of colums
func setColumnWidths(f *excelize.File, sheetName string, columnWidths []float64) {
	for columnIdx, columnWidth := range columnWidths{
		columnName, _ := excelize.ColumnNumberToName(columnIdx + 1)
		f.SetColWidth(sheetName, columnName, columnName, columnWidth)
	}
}

// Return an array of values of a struct, based on the order of the array of keys
func structToList(cve api.Cve, keys []string) (values []string) {
	v := reflect.ValueOf(cve)
	for _, key := range keys {
		cell := v.FieldByName(key).String()
		values = append(values, cell)
	}
	return
}

// Write line to a worksheet based on an array of strings
func writeLine(f *excelize.File, sheetName string, content []string, rowIdx int) {
	for columnIdx, cellContent := range content {
		cellName, _ := excelize.CoordinatesToCellName(columnIdx + 1, rowIdx + 1)
		f.SetCellValue(sheetName, cellName, cellContent)
	}
}
